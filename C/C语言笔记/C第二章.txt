函数是C语言源程序的基本单位  C语言源程序由一个或多个函数组成

一个C语言程序有且只有一个main

用户自定义函数和库函数 调用库函数之前要加编译预处理命令

c语言中要进行输入输出处理时，必须包含头文件 stdio.h

函数=函数头+函数体

所有符号都是英文符号 /*。。。*/表注释（加强可读性和可维护性） 分号结尾

源程序的六种基本符号：
1关键字 
2标识符（字母和下划线开头，由数字 字母 下划线组成；用户自定义标识符不能用关键字；大小写敏感）{区别用户自定义标识符和系统预定义标识符}
3运算符 
4分隔符（相邻关键字和标识符之间必须使用分隔符 “，”分隔并列项）
5其他符号（//单行注释）
6数据（即各种类型的字面常量）

数据类型：基本类型：整型int
                    实型：单精度型float 双精度型double
                    字符型char

基本数据类型前可加两类修饰符： 按数据占内存空间大小  long和short；按数据正负号 signed和unsigned。（注意取值范围表）

在实际编程中，应用sizeof来获得该数据类型所占的字节数 sizeof是一个运算符

对数据类型在内存中占有的字节问题与具体的C语言编译环境有关

整型常量：八进制（以0开头）十六进制（以0x开头）十进制
另，带修饰符的，长整型后带L，无符号后带U

实型常量：只能用十进制（小数和指数）小数点不能省略 小数点左或右数字可以缺省（单边）默认为double （长双精度的后为L） float的后要带F 
注意取值范围表 无逗号形式 无D表示形式 E/e右必须为整数，不能为小数且不能为空，但左可为整数或小数。1E400（X）是因为400超范围

字符常量：用一对单引号括一个字符
\n \r \0 \t \v \b \f \a \" \' \\ \? \ddd \xhh

数字与数字字符之间通过加减48换算
大小写字母之间通过加减32换算

常用的ASCII码：32空格 48是0 65A 97a

字符串常量：用一对双引号括一个字符序列
（系统为每一个用双引号括起来的字符串常量的末尾都添加了一个空字符作为结束标记）
（字符串常量的实际字符数总是比其双引号中的字符数多1）

符号常量：宏定义  #define 将标识符定义为字符串（预处理命令）

变量=数据类型+变量名 变量名是变量的唯一标识 程序可通过变量名修改和访问变量（数字不能开头，以字母 数字 下划线组成）

变量遵循 “先定义后使用”原则
语法：关键字+标识符（，隔开并列项）


区别：初始化：定义+赋值 在同一条语句 例：int x=5;（初值通常是常量，，也能是其他变量或表达式）
      定义 赋值：分开命令                   例：int x;x=5;

赋值运算是变量获得值的重要方式之一

scanf:

语法：scanf(<格式控制字符串>,<变量地址列表>);

格式控制字符串=格式转换说明符+输入分隔符

格式转换说明符： %d %i %o %x %c %s %f %e %lf %%

不同变量的地址要用，隔开

scanf会自动忽略和输入分隔符（空格 制表 回车等）相同的字符

数据流：用户从键盘输入的数据（一串连续的字符）

格式修饰符:l(d i o x u 变输入long   f e变输入double) 
            
           L(f e 变输入 long double) 
           
           h（d i o x 变输入short）
            
           m（域宽=截取位数）  例：%2d%3d 二位数+三位数
           
           *（忽略输入）

注意！！！ scanf允许同一条语句中有不同类型变量的值 结束时一定以回车符结束 输入变量时一定要有变量地址 不能忘&
           
           区别"%f"和"%lf" 格式控制字符串不能用"\n"


printf:

语法：printf(<格式控制字符串>,<输出参数表>;

格式控制字符串=格式转换说明符+普通字符（普通字符原样输出）
 
格式转换说明符：%d %i %u （有无符号区别）

                %o %x （不输出前导符：0，0x）
 
                %c %s 

                %f(默认6位 不足用0补足 多则四舍五入 十进制小数形式 float=7位 double=16位)    %e（ 指数形式 e为指数部分 小数点前有且仅有一位非零数）

                %g（小数形式，会自动去掉无意义的0）

                %%             

输出参数表中数据项按从左到右顺序与说明符一一对应，数据项可有可无

验证整型和字符型对应关系："%c""%d"

精度格式修饰符："%.10f" 小数点后十位小数  （"%2d"截取两位整数） 用此符时，应考虑显示精度格式与数据的有效数字位数之间相互匹配的问题 如 3.141592653589793和3.141592653589793f

scanf输入实型数据时不能控制精度

格式修饰符：l (d i o x u 变为输出long)
            
            L（f e g 变为输出long double） 

            m（整数 最小域宽 m>0:x<m 则左多余位补空格  x>m 则实际宽度输出 有前导符0则左多余位补0; m<0 则右多余位补空格） 

            n（位于m后 由点+整数组成 控制实数的小数形式 《最后一位四舍五入》控制字符串时表示从串左侧开始截取的子串字符个数 ）

            -（左对齐输出 省略则为右对齐输出）

注意区别！！！用scanf时变量名要加地址符&(但字符串变量和数组变量以及指针变量不加) 而printf变量名前不能加地址符&

getchar和putchar:

语法：<变量>=getchar();  （赋值）
      putchar(<参数>);   （输出）一次只能输出一个字符

getchar()可拿来忽略字符

const:
语法：const<数据类型> <只读变量名1>=<值1>[,<只读变量名2>=<值2>,...];

只读变量名是用户自定义标识符（只读变量必须在定义时给定初始化值，后也不允许被修改）

区别：只读变量和符号常量：前者有数据类型 后者无
                          前者进行类型检查 后者只进行字符串替换

说明：在vs2010下： int long 4B
                   short    2B
                   char     1B(字符取值长度0~127)
      
      符号位：有符号数的最高位 0=正号 1=负号
 
      无符号数为非负数

原码：最高位表正负 其余是整数绝对值对应的二进制编码

反码：符号位不变 其余各位是对原码进行按位求反操作（0 1 互换）

补码：反码基础加一   即：正数的补码就是其原码 负数的补码是其反码加一

常用整数存储格式：short:-32678~32767
                                                    (超出会溢出)
                  unsigned short:0~65535

         
























